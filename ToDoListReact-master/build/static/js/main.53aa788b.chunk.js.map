{"version":3,"sources":["service.js","App.js","index.js"],"names":["apiUrl","axios","defaults","baseURL","interceptors","response","use","error","console","message","data","status","Promise","reject","service","getTasks","async","get","concat","addTask","log","name","post","setCompleted","id","isComplete","updatedItem","put","headers","Content-Type","deleteTask","delete","App","newTodo","setNewTodo","useState","todos","setTodos","getTodos","useEffect","React","createElement","className","onSubmit","e","preventDefault","placeholder","value","onChange","target","style","display","map","todo","key","type","defaultChecked","updateCompleted","checked","onClick","deleteTodo","ReactDOM","createRoot","document","getElementById","render"],"mappings":"gKACC,MAAMA,EAAS,wBACfC,IAAMC,SAASC,QAAUH,EAE1BC,IAAMG,aAAaC,SAASC,IACxBD,GAAYA,EACZE,IACIC,QAAQD,MAAM,cAAeA,EAAME,SAC/BF,EAAMF,WACNG,QAAQD,MAAM,iBAAkBA,EAAMF,SAASK,MAC/CF,QAAQD,MAAM,mBAAoBA,EAAMF,SAASM,SAE9CC,QAAQC,OAAON,KAGf,IAAAO,EAAA,CAEbC,SAAUC,UAER,aADqBf,IAAMgB,IAAG,GAAAC,OAAIlB,EAAM,YAC1BU,MAIhBS,QAASH,UACPR,QAAQY,IAAI,UAAWC,GACvB,IAEI,aADqBpB,IAAMqB,KAAI,GAAAJ,OAAIlB,EAAM,UAAU,CAAEqB,UACvCX,KAChB,MAAOH,GAGL,MAFAC,QAAQD,MAAM,qBAAsBA,EAAME,SAEpCF,IAGVgB,aAAcP,MAAOQ,EAAIC,KACvBjB,QAAQY,IAAI,eAAgB,CAAEI,KAAIC,eAClC,IAEI,MAIMC,EAAc,CAChBL,YAL+BpB,IAAMgB,IAAG,GAAAC,OAAIlB,EAAM,WAAAkB,OAAUM,KACtBd,KAInBW,KACnBI,WAAYA,GAShB,aALqBxB,IAAM0B,IAAG,GAAAT,OAAIlB,EAAM,WAAAkB,OAAUM,GAAME,EAAa,CACjEE,QAAS,CACLC,eAAgB,uBAGVnB,KAChB,MAAOH,GAEL,MADAC,QAAQD,MAAM,iCAAkCA,EAAME,SAChDF,IASduB,WAAYd,UACV,UACUf,IAAM8B,OAAM,UAAAb,OAAWM,IAC7BhB,QAAQY,IAAI,6BACd,MAAOb,GAEL,MADAC,QAAQD,MAAM,uBAAwBA,EAAME,SACtCF,KCVCyB,MA1Df,WACE,MAAOC,EAASC,GAAcC,mBAAS,KAChCC,EAAOC,GAAYF,mBAAS,IAEnCnB,eAAesB,IACb,MAAMF,QAActB,EAAQC,WAC5BsB,EAASD,GAyBX,OALAG,oBAAU,KACRD,KACC,IAIDE,IAAAC,cAAA,WAASC,UAAU,WACjBF,IAAAC,cAAA,UAAQC,UAAU,UAChBF,IAAAC,cAAA,UAAI,SACJD,IAAAC,cAAA,QAAME,SA1BZ3B,eAA0B4B,GACxBA,EAAEC,uBACI/B,EAAQK,QAAQc,GACtBC,EAAW,UACLI,MAuBAE,IAAAC,cAAA,SAAOC,UAAU,WAAWI,YAAY,8BAA8BC,MAAOd,EAASe,SAAWJ,GAAMV,EAAWU,EAAEK,OAAOF,WAG/HP,IAAAC,cAAA,WAASC,UAAU,OAAOQ,MAAO,CAAEC,QAAS,UAC1CX,IAAAC,cAAA,MAAIC,UAAU,aACXN,EAAMgB,IAAIC,GAEPb,IAAAC,cAAA,MAAIC,UAAWW,EAAK5B,WAAa,YAAc,GAAI6B,IAAKD,EAAK7B,IAC3DgB,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SAAOC,UAAU,SAASa,KAAK,WAAWC,eAAgBH,EAAK5B,WAAYuB,SAAWJ,IA7BtG5B,eAA+BqC,EAAM5B,SAC7BX,EAAQS,aAAa8B,EAAK7B,GAAIC,SAC9Ba,KA2BoGmB,CAAgBJ,EAAMT,EAAEK,OAAOS,WAC3HlB,IAAAC,cAAA,aAAQY,EAAKhC,MACbmB,IAAAC,cAAA,UAAQC,UAAU,UAAUiB,QAASA,KA1BrD3C,eAA0BQ,SAClBV,EAAQgB,WAAWN,SACnBc,KAwBkDsB,CAAYP,EAAK7B,2BCtChEqC,EAASC,WAAWC,SAASC,eAAe,SACpDC,OAAOzB,IAAAC,cAACT,EAAG","file":"static/js/main.53aa788b.chunk.js","sourcesContent":["import axios from 'axios';\n const apiUrl = \"http://localhost:5216\";\n axios.defaults.baseURL = apiUrl;\n// הוספת interceptor לתפיסת שגיאות\naxios.interceptors.response.use(\n    response => response,\n    error => {\n        console.error(\"HTTP Error:\", error.message);\n        if (error.response) {\n            console.error(\"Response data:\", error.response.data);\n            console.error(\"Response status:\", error.response.status);\n        }\n        return Promise.reject(error); // זרוק את השגיאה כדי שנוכל לטפל בה במקום אחר\n    }\n);\nexport default {\n\n  getTasks: async () => {\n    const result = await axios.get(`${apiUrl}/items`)    \n    return result.data;\n  },\n\n  \n  addTask: async(name) => {\n    console.log('addTask', name);\n    try {\n        const result = await axios.post(`${apiUrl}/items`, { name });\n        return result.data;\n    } catch (error) {\n        console.error(\"Error adding task:\", error.message);\n\n        throw error; // זרוק את השגיאה כדי שתוכל לטפל בה במקום אחר\n    }\n},\n    setCompleted: async (id, isComplete) => {\n      console.log('setCompleted', { id, isComplete });\n      try {\n          // שליפת הפריט הקיים מהשרת\n          const existingItemResponse = await axios.get(`${apiUrl}/items/${id}`);\n          const existingItem = existingItemResponse.data;\n  \n          // הכנת הנתונים לעדכון\n          const updatedItem = {\n              name: existingItem.name, // שומר את השם הקודם\n              isComplete: isComplete // מעדכן את ה-isComplete\n          };\n  \n          // שליחת הבקשה לעדכון\n          const result = await axios.put(`${apiUrl}/items/${id}`, updatedItem, {\n              headers: {\n                  'Content-Type': 'application/json'\n              }\n          });\n          return result.data;\n      } catch (error) {\n          console.error(\"Error setting task completion:\", error.message);\n          throw error;\n      }\n  },\n  \n\n\n\n\n\n  deleteTask: async (id) => {\n    try {\n        await axios.delete(`/items/${id}`);\n        console.log('Task deleted successfully');\n    } catch (error) {\n        console.error(\"Error deleting task:\", error.message);\n        throw error; // זרוק את השגיאה כדי שתוכל לטפל בה במקום אחר\n    }\n}\n\n};\n\n\n","import React, { useEffect, useState } from 'react';\nimport service from './service.js';\n\nfunction App() {\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n\n  async function getTodos() {\n    const todos = await service.getTasks();\n    setTodos(todos);\n  }\n\n  async function createTodo(e) {\n    e.preventDefault();\n    await service.addTask(newTodo);\n    setNewTodo(\"\");//clear input\n    await getTodos();//refresh tasks list (in order to see the new one)\n  }\n\n  async function updateCompleted(todo, isComplete) {\n    await service.setCompleted(todo.id, isComplete);\n    await getTodos();//refresh tasks list (in order to see the updated one)\n  }\n\n  async function deleteTodo(id) {\n    await service.deleteTask(id);\n    await getTodos();//refresh tasks list\n  }\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={createTodo}>\n          <input className=\"new-todo\" placeholder=\"Well, let's take on the day\" value={newTodo} onChange={(e) => setNewTodo(e.target.value)} />\n        </form>\n      </header>\n      <section className=\"main\" style={{ display: \"block\" }}>\n        <ul className=\"todo-list\">\n          {todos.map(todo => {\n            return (\n              <li className={todo.isComplete ? \"completed\" : \"\"} key={todo.id}>\n                <div className=\"view\">\n                  <input className=\"toggle\" type=\"checkbox\" defaultChecked={todo.isComplete} onChange={(e) => updateCompleted(todo, e.target.checked)} />\n                  <label>{todo.name}</label>\n                  <button className=\"destroy\" onClick={() =>deleteTodo (todo.id)}></button>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    </section >\n  );\n}\n\nexport default App;","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import App from './App';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nimport React from 'react';\n// import ReactDOM from 'react-dom';\nimport App from './App';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nimport ReactDOM from 'react-dom/client';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n"],"sourceRoot":""}